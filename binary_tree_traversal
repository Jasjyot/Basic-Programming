#include<iostream>
using namespace std;
struct node
{
     char data;                 //Data element
     struct node * left;          //Pointer to left node
     struct node * right;         //Pointer to right node
};

struct node * newNode(char element);
void inOrder(struct node * root);
void preOrder(struct node * root);
void postOrder(struct node * root);

int main()
{
    struct node * root=newNode('F');
    root->left=newNode('B');
    root->right=newNode('G');
    (root->left)->left=newNode('A');
    (root->left)->right=newNode('D');
    ((root->left)->right)->left=newNode('C');
    ((root->left)->right)->right=newNode('E');
    (root->right)->right=newNode('I');
    ((root->right)->right)->left=newNode('H');

    cout<<"The In-order traversal: ";
    cout<<endl;
    inOrder(root);
    cout<<endl;


    cout<<"The Pre-order traversal: ";
    cout<<endl;
    preOrder(root);
    cout<<endl;

    cout<<"The Post-order traversal: ";
    cout<<endl;
    postOrder(root);
    cout<<endl;

    return 0;
}

struct node * newNode(char element)
{
    struct node * temp=(node * )malloc(sizeof(node));
    temp->data=element;
    temp->left=temp->right=NULL;
    return temp;
}   
void inOrder(struct node * root)
{
    if(root!='\0')
    {
        inOrder(root->left);
        cout<<root->data<<" ";
        inOrder(root->right);
    }
}

void preOrder(struct node * root)
{
    if(root!='\0')
    {
        cout<<root->data<<" ";
        preOrder(root->left);
        preOrder(root->right);
    }
}

void postOrder(struct node * root)
{
    if(root!='\0')
    {
        postOrder(root->left);
        postOrder(root->right);
        cout<<root->data<<" ";
    }
}
